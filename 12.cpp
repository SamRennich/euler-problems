/*
Problem 12: Highly Divisible Triangular Number

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

Answer: 76576500
Solved: May 25, 2021
*/

#include <iostream> // std

// Declare constants
const int GOAL = 500; // Sets how many divisors to find

// Main program
int main() {
	
	unsigned long long int triangleNum = 0; // Stores the current triangle num
	double divisorTotal = 1; // Tracks the total number of divisors
	
	for (int i = 1; divisorTotal <= GOAL; i++) {
		
		triangleNum += i; // Finds new triangle number
		unsigned long long int numReset = triangleNum; // Stores the triangle number for later reset
		
		divisorTotal = 1; // Reset divisor total
		int power = 1; // Stores power for prime factor repetition
		
		while (triangleNum % 2 == 0) { // Divide until odd
			triangleNum /= 2; // Divide
			divisorTotal *= static_cast<double>(power + 1) / static_cast<double>(power); // Increase divisor total
			power++; // Iterate power for repeated division
		}

		power = 1; // Reset power
		
		for (int divisor = 3; triangleNum > 1; divisor += 2) { // Repeats until fully factored
			
			while (triangleNum % divisor == 0) { // While the triangle number is divisible...
				triangleNum /= divisor; // Divide
				divisorTotal *= static_cast<double>(power + 1) / static_cast<double>(power); // Increase divisor total
				power++; // Iterate power for repeated division
			} 
			power = 1; // Reset power
		}
		
		triangleNum = numReset; // Resets the triangle number for next iteration
	}
	
	std::cout << triangleNum << std::endl; // Print answer
	
	//Exit
    getchar();
    return 0;
}