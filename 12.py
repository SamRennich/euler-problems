# Problem 12: Highly Divisible Triangular Number

# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

# Answer: 76576500
# Solved: 4/7/21

divisorTotal = 1 # Tracks total number of divisors
counter = 1 # Tracks the stage in triangular numbers

while divisorTotal <= 500: # Iterates until a number with more than 500 divisors is found
    
    num = int((1 / 2) * counter * (counter + 1)) # Finds the triangular value
    
    divisorTotal = 1 # Resets the total
    power = 0 # Power for prime factor repetition

    while num % 2 == 0: # Iterates through evens
        if num % 2== 0:
            num /= 2
            divisorTotal *= (2 + power) / (1 + power) # Increases overall divisor total
            power += 1

    divisor = 3 # Resets divisor
    power = 0 # Resets power

    while num > 1: # Iterates until value is fully factored
        if num % divisor == 0:
            num /= divisor
            divisorTotal *= (2 + power) / (1 + power) # Increases overall divisor total
            power += 1
        else:
            power = 0 # Resets power
            divisor += 2 # Iterates through every odd divisor
    
    counter += 1 # Iterates through triangular number stages

num = int((1 / 2) * counter * (counter - 1)) # Finds num after while has ended

print(num) # Prints answer